# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  recipe(relativePath: String): Recipe!
  recipeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: RecipeFilter): RecipeConnection!
}

input DocumentFilter {
  recipe: RecipeFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Recipe | Folder

type Recipe implements Node & Document {
  title: String!
  date: String!
  source: String!
  category: String!
  tags: [String!]!
  prepTime: String!
  cookTime: String!
  totalTime: String!
  servings: String!
  heroImage: String
  images: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input RecipeFilter {
  title: StringFilter
  date: DatetimeFilter
  source: StringFilter
  category: StringFilter
  tags: StringFilter
  prepTime: StringFilter
  cookTime: StringFilter
  totalTime: StringFilter
  servings: StringFilter
  heroImage: ImageFilter
  images: ImageFilter
  body: RichTextFilter
}

type RecipeConnectionEdges {
  cursor: String!
  node: Recipe
}

type RecipeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [RecipeConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateRecipe(relativePath: String!, params: RecipeMutation!): Recipe!
  createRecipe(relativePath: String!, params: RecipeMutation!): Recipe!
}

input DocumentUpdateMutation {
  recipe: RecipeMutation
  relativePath: String
}

input DocumentMutation {
  recipe: RecipeMutation
}

input RecipeMutation {
  title: String
  date: String
  source: String
  category: String
  tags: [String]
  prepTime: String
  cookTime: String
  totalTime: String
  servings: String
  heroImage: String
  images: [String]
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
